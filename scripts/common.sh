#!/bin/bash

# Common utility functions for EmergencyStorage scripts
# This file contains shared functions used across all storage source scripts

# Color codes for better output formatting
readonly COLOR_RED='\033[0;31m'
readonly COLOR_GREEN='\033[0;32m'
readonly COLOR_YELLOW='\033[1;33m'
readonly COLOR_BLUE='\033[0;34m'
readonly COLOR_RESET='\033[0m'

# Logging functions for consistent output formatting
log_info() {
    echo -e "${COLOR_BLUE}[INFO]${COLOR_RESET} $1"
}

log_success() {
    echo -e "${COLOR_GREEN}[SUCCESS]${COLOR_RESET} $1"
}

log_warning() {
    echo -e "${COLOR_YELLOW}[WARNING]${COLOR_RESET} $1"
}

log_error() {
    echo -e "${COLOR_RED}[ERROR]${COLOR_RESET} $1" >&2
}

# Function to validate drive path
validate_drive_path() {
    local drive_path="$1"
    
    if [ -z "$drive_path" ]; then
        log_error "Drive address is required"
        return 1
    fi
    
    # Create directory if it doesn't exist
    if [ ! -d "$drive_path" ]; then
        log_info "Creating directory: $drive_path"
        mkdir -p "$drive_path" || {
            log_error "Cannot create directory $drive_path"
            return 1
        }
    fi
    
    # Check if directory is writable
    if [ ! -w "$drive_path" ]; then
        log_error "Directory $drive_path is not writable"
        return 1
    fi
    
    return 0
}

# Function to check if a command is available
check_command() {
    local command="$1"
    local package="$2"
    
    if ! command -v "$command" &> /dev/null; then
        log_error "$command is required but not installed"
        log_info "Please install $command: sudo apt-get install $package"
        return 1
    fi
    
    return 0
}

# Function to check internet connectivity
check_internet() {
    local test_url="$1"
    local timeout="${2:-10}"
    
    if curl -s --connect-timeout "$timeout" "$test_url" > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Function to create a standardized README for each collection
create_collection_readme() {
    local collection_name="$1"
    local description="$2"
    local collections_array="$3"
    local estimated_size="$4"
    local additional_notes="$5"
    
    cat > "README_${collection_name^^}.txt" << EOF
EmergencyStorage - $collection_name Collection
===============================================

$description

Key collections include:
$collections_array

$additional_notes

Estimated storage size: $estimated_size

This file was generated by EmergencyStorage on $(date)
For more information, visit: https://github.com/VictoKu1/EmergencyStorage
EOF
}

# Function to safely change directory
safe_cd() {
    local target_dir="$1"
    
    if [ ! -d "$target_dir" ]; then
        log_error "Directory $target_dir does not exist"
        return 1
    fi
    
    cd "$target_dir" || {
        log_error "Failed to change to directory $target_dir"
        return 1
    }
    
    return 0
}

# Function to create download placeholder file
create_download_placeholder() {
    local item_name="$1"
    local download_url="$2"
    local filename="${item_name}_download_url.txt"
    
    log_info "Preparing download placeholder for: $item_name"
    echo "$download_url" > "$filename"
}